name: Build and Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  actions: read

jobs:
  validate:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.tag_check.outputs.VERSION }}
      is_prerelease: ${{ steps.tag_check.outputs.IS_PRERELEASE }}
      is_valid: ${{ steps.tag_check.outputs.IS_VALID }}
      environment: ${{ steps.tag_check.outputs.ENVIRONMENT }}
      variant: ${{ steps.tag_check.outputs.VARIANT }}
    steps:
      - name: Check tag format
        id: tag_check
        run: |
          TAG=${GITHUB_REF#refs/tags/v}
          echo "Processing tag: $TAG"

          # Validate tag format
          if [[ "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-((alpha|beta)\.[0-9]+))?$ ]]; then
            echo "IS_VALID=true" >> $GITHUB_OUTPUT
            echo "VERSION=$TAG" >> $GITHUB_OUTPUT

            if [[ "$TAG" == *"-"* ]]; then
              echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
              echo "ENVIRONMENT=development" >> $GITHUB_OUTPUT
              VARIANT=$(echo $TAG | grep -o 'alpha\|beta')
              echo "VARIANT=$VARIANT" >> $GITHUB_OUTPUT
            else
              echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
              echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
              echo "VARIANT=none" >> $GITHUB_OUTPUT
            fi
          else
            echo "IS_VALID=false" >> $GITHUB_OUTPUT
            echo "Invalid tag format: $TAG"
            exit 1
          fi

  build:
    needs: validate
    if: needs.validate.outputs.is_valid == 'true'
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            asset_name: bugster-linux
          - os: windows-latest
            asset_name: bugster-windows.exe
          - os: macos-latest
            asset_name: bugster-macos

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -e .

      - name: Build executable
        run: |
          pyinstaller src.spec --clean

      - name: Rename executable for upload
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            # Try multiple possible locations for Windows executable
            if [ -f "dist/src.exe" ]; then
              cp dist/src.exe ${{ matrix.asset_name }}
            elif [ -f "dist/src/src.exe" ]; then
              cp dist/src/src.exe ${{ matrix.asset_name }}
            else
              echo "Windows executable not found in expected locations"
              find dist -name "*.exe" -type f
              exit 1
            fi
          else
            # Try multiple possible locations for Linux/macOS executable
            if [ -f "dist/bugster" ]; then
              cp dist/bugster ${{ matrix.asset_name }}
            elif [ -f "dist/src/bugster" ]; then
              cp dist/src/bugster ${{ matrix.asset_name }}
            else
              echo "Executable not found in expected locations"
              find dist -type f -executable
              exit 1
            fi
            chmod +x ${{ matrix.asset_name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}
          if-no-files-found: error

  release:
    needs: [validate, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: ls -la artifacts/

      - name: Prepare artifacts for release
        run: |
          mkdir -p release
          cp artifacts/bugster-linux/bugster-linux release/
          cp artifacts/bugster-windows.exe/bugster-windows.exe release/
          cp artifacts/bugster-macos/bugster-macos release/
          chmod +x release/bugster-linux
          chmod +x release/bugster-macos

          # Copy installation wrapper scripts
          cp scripts/install.sh release/
          cp scripts/install.bat release/
          chmod +x release/install.sh

          # Create zip files for each platform
          # Rename binaries to 'bugster' or 'src.exe' inside the zip files as expected by the installer
          cd release
          mkdir -p linux windows macos
          cp bugster-linux linux/bugster
          cp bugster-windows.exe windows/src.exe
          cp bugster-macos macos/bugster

          cd linux && zip ../bugster-linux.zip bugster && cd ..
          cd windows && zip ../bugster-windows.zip src.exe && cd ..
          cd macos && zip ../bugster-macos.zip bugster && cd ..

          # Keep the original binaries available as well
          cd ..

          ls -la release/

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: |
            Bugster CLI v${{ needs.validate.outputs.version }}
            (${{ needs.validate.outputs.environment }}${{ needs.validate.outputs.variant != 'none' && format(' - {0}', needs.validate.outputs.variant) || '' }})
          draft: false
          prerelease: ${{ needs.validate.outputs.is_prerelease }}
          files: release/*
          body: |
            ## Release Information
            - Version: v${{ needs.validate.outputs.version }}
            - Environment: ${{ needs.validate.outputs.environment }}
            ${{ needs.validate.outputs.variant != 'none' && format('- Variant: {0}', needs.validate.outputs.variant) || '' }}
            - API Endpoint: ${{ needs.validate.outputs.environment == 'production' && 'api.src.app' || 'dev.src.api' }}

            ## Installation
            ### Linux/macOS
            ```bash
            curl -fsSL https://raw.githubusercontent.com/src/bugster-cli/main/scripts/install.sh | bash
            ```

            ### Windows
            ```powershell
            iwr https://raw.githubusercontent.com/src/bugster-cli/main/scripts/install.bat -useb | iex
            ```

            ## Manual Installation
            Download the appropriate zip file for your platform and extract the binary to a location in your PATH.
